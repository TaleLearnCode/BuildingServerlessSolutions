name: Continuous Deployment

on:
  push:
    branches:
      - develop
    paths:
      - 'infra/**'
      - 'src/**'

jobs:
  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      terraform: ${{ steps.filter.outputs.terraform }}
      production-schedule-facade: ${{ steps.filter.outputs.production-schedule-facade }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            apim:
              - 'infra/solution/apim/**'
            core:
              - 'infra/solution/remanufacturing/core/**'
            ordernextcore:
              - 'infra/solution/remanufacturing/ordernextcore/**'

  apim:
    name: 'Terraform API Management'
    needs: paths-filter
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    if: needs.paths-filter.outputs.terraform == 'true'
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
  
      # Install the latest version of Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
  
      # Initialize the Terraform project
      - name: Terraform Init
        run: terraform init -backend-config="resource_group_name=${{ secrets.TERRAFORM_RESOURCE_GROUP }}" -backend-config="storage_account_name=${{ secrets.TERRAFORM_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=terraform-state" -backend-config="key=remanufacturing.tfstate"
        working-directory: ./infra/solution/apim
  
      # Validate the Terraform configuration
      - name: Terraform Validate
        run: terraform validate
        working-directory: ./infra/solution/apim
  
      # Generate and show an execution plan
      - name: Terraform Plan
        run: terraform plan --var-file=dev.tfvars -out=tfplan
        working-directory: ./infra/solution/apim  
      
      # Apply the Terraform plan
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./infra/solution/apim

  core:
    name: 'Terraform Remanufacturing Core'
    needs: paths-filter
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    if: needs.paths-filter.outputs.terraform == 'true'
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
  
      # Install the latest version of Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
  
      # Initialize the Terraform project
      - name: Terraform Init
        run: terraform init -backend-config="resource_group_name=${{ secrets.TERRAFORM_RESOURCE_GROUP }}" -backend-config="storage_account_name=${{ secrets.TERRAFORM_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=terraform-state" -backend-config="key=remanufacturing.tfstate"
        working-directory: ./infra/solution/remanufacturing/core
  
      # Validate the Terraform configuration
      - name: Terraform Validate
        run: terraform validate
        working-directory: ./infra/solution/remanufacturing/core
  
      # Generate and show an execution plan
      - name: Terraform Plan
        run: terraform plan --var-file=dev.tfvars -out=tfplan
        working-directory: ./infra/solution/remanufacturing/core  
      
      # Apply the Terraform plan
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./infra/solution/remanufacturing/core

  ordernextcore:
    name: 'Terraform Remanufacturing Order Next Core'
    needs: paths-filter
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    if: needs.paths-filter.outputs.terraform == 'true'
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
  
      # Install the latest version of Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
  
      # Initialize the Terraform project
      - name: Terraform Init
        run: terraform init -backend-config="resource_group_name=${{ secrets.TERRAFORM_RESOURCE_GROUP }}" -backend-config="storage_account_name=${{ secrets.TERRAFORM_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=terraform-state" -backend-config="key=remanufacturing.tfstate"
        working-directory: ./infra/solution/remanufacturing/ordernextcore
  
      # Validate the Terraform configuration
      - name: Terraform Validate
        run: terraform validate
        working-directory: ./infra/solution/remanufacturing/ordernextcore
  
      # Generate and show an execution plan
      - name: Terraform Plan
        run: terraform plan --var-file=dev.tfvars -out=tfplan
        working-directory: ./infra/solution/remanufacturing/ordernextcore  
      
      # Apply the Terraform plan
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./infra/solution/remanufacturing/ordernextcore